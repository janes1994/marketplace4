@rendermode InteractiveServer

@using BlazorApp1.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using static BlazorApp1.Components.Pages.SecondCategory

@inject CategoryService CategoryService

<style>
    table {
    font-family: Arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
    }
    td, th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
    vertical-align: top;
    }
    tr:nth-child(even) {
    background-color: #f2f2f2;
    }
</style>

<h3>First Category</h3>

<button class="btn btn-primary" @onclick="OnShowAddModal">Add First Category</button>

<Modal @ref=modalFirstCategory Title=@modalTitle>
    <BodyTemplate>
        <EditForm Model="categoryModel" OnValidSubmit="SaveCategory">
            <DataAnnotationsValidator />
            <div>
                <label>Name</label>
                <input class="form-control" @bind="categoryModel.Name"/>
                <ValidationMessage For="@(() => categoryModel.Name)"/>
            </div>
            <div>
                <label>Icon</label>
                <input class="form-control" @bind="categoryModel.Icon"/>
                <ValidationMessage For="@(() => categoryModel.Icon)"/>
            </div>
            <div>
                <label>Banner</label>
                <input class="form-control" @bind="categoryModel.Banner"/>
                <ValidationMessage For="@(() => categoryModel.Banner)"/>
            </div>
            <button type="submit" class="btn btn-primary">Save changes</button>
        </EditForm>
    </BodyTemplate>
</Modal>

<table>
    <tr>
        <th>No.</th>
        <th>Name</th>
        <th>Icon</th>
        <th>Banner</th>
        <th>Action</th>
    </tr>
    @foreach (var (category, index) in Categories.Select((c, i) => (c, i + 1)))
    {
        <tr>
            <td>@index</td> <!-- Display number starting from 1 -->
            <td>@category.Name</td>
            <td>@category.Icon</td>
            <td>@category.Banner</td>
            <td>
                <button class="btn btn-warning btn-sm" @onclick="() => OnEditCategory(category)">Edit</button>
                <button class="btn btn-danger btn-sm" @onclick="() => ShowConfirmationAsync(category)">Delete</button>
            </td>
        </tr>
    }
</table>

<ConfirmDialog @ref="dialog" />

@code {
    [Parameter] public List<SecondCategoryView> SelectedCategory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await OnCategorySelected.InvokeAsync(Categories);
        CategoryService.SetCategory(Categories);
    }
    public class FirstCategoryView
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Icon is required")]
        public string Icon { get; set; } = string.Empty;

        [Required(ErrorMessage = "Banner is required")]
        public string Banner { get; set; } = string.Empty;
    }

    private FirstCategoryView categoryModel = new();

    private List<FirstCategoryView> Categories = new ()
    {
        new() { Id = "1", Name = "Computer", Icon = "Computer Icon", Banner = "Computer Banner"},   
        new() { Id = "2", Name = "Phone", Icon = "Phone Icon", Banner = "Phone Banner"}
    };
    private Modal modalFirstCategory = default!;
    private string modalTitle = "Add Category";
    private bool isEditing = false;
    
    
    private async Task OnShowAddModal()
    {
        categoryModel = new();
        modalTitle = "Add Category";
        isEditing = false;

        await modalFirstCategory.ShowAsync();
    }

    private async Task OnEditCategory (FirstCategoryView category) 
    {
        categoryModel = new FirstCategoryView
        {
            Id = category.Id,
            Name = category.Name,
            Icon = category.Icon,
            Banner = category.Banner
        };
        modalTitle = "Edit Category";
        isEditing = true;
        await modalFirstCategory.ShowAsync();
    }

    [Parameter] public EventCallback<FirstCategoryView> OnRemoveSecondCategory { get; set; }

    private async void DeleteCategory(FirstCategoryView category)
    {
        Categories.Remove(category);

        await OnRemoveSecondCategory.InvokeAsync(category);

        CategoryService.SetCategory(Categories);
    }

    private async Task OnHideModal()
    {
        await modalFirstCategory.HideAsync();
    }

    [Parameter] public EventCallback<List<FirstCategoryView>> OnCategorySelected { get; set; }
    
    private async Task SaveCategory()
    {
        if (isEditing)
        {
            var existingCategory = Categories.FirstOrDefault(c => c.Id == categoryModel.Id);
            if (existingCategory != null)
            {
                existingCategory.Name = categoryModel.Name;
                existingCategory.Icon = categoryModel.Icon;
                existingCategory.Banner = categoryModel.Banner;
            }
        }
        else 
        {
            Categories.Add(new FirstCategoryView
            {
                Name = categoryModel.Name,
                Icon = categoryModel.Icon,
                Banner = categoryModel.Banner
            });
        }

        await OnCategorySelected.InvokeAsync(Categories);
        
        CategoryService.SetCategory(Categories);

        categoryModel = new FirstCategoryView();

        await OnHideModal();
    }

    private ConfirmDialog dialog;

    private async Task ShowConfirmationAsync(FirstCategoryView category)
    {
        var isExist = Categories.Where(category => SelectedCategory.Any(s => s.Id == category.Id));

        if (isExist.Count() > 0)
        {
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to delete this?",
                message1: "This will delete the record. Once deleted can not be rolled back.",
                message2: "Do you want to proceed?");

            if (confirmation)
            {
                DeleteCategory(category);
            }
            else
            {
                // do whatever
            }
        }
        else 
        {
            DeleteCategory(category);
        }
    }
}
