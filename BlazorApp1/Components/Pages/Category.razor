@page "/category"
@rendermode InteractiveServer

@using BlazorApp1.Components.Models
@using BlazorApp1.Components.Services
@inject CategoryService CategoryService

<Modal @ref="modalCategory" Title="@modalTitle">
    <BodyTemplate>
        <EditForm Model="categoryModel" OnValidSubmit="SaveCategory">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label">Name</label>
                <input class="form-control" @bind="categoryModel.Name" />
                <ValidationMessage For="@(() => categoryModel.Name)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Icon</label>
                <input class="form-control" @bind="categoryModel.Icon" />
                <ValidationMessage For="@(() => categoryModel.Icon)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Banner</label>
                <input class="form-control" @bind="categoryModel.Banner" />
                <ValidationMessage For="@(() => categoryModel.Banner)" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </BodyTemplate>
</Modal>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Category</h3>
        <button class="btn btn-success" @onclick="OnShowAddModal">Add category</button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var (category, index) in rows.Select((c, i) => (c, i + 1)))
        {
            <tr>
                <td>@index</td>
                <td>
                    @category.Name
                </td>
                <td>
                    <button class="btn btn-success btn-sm" @onclick="() => AddSubcategory(category.categoryViewModel)">Add subcategory</button>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditCategory(category.categoryViewModel)">Edit subcategory</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveCategory(category.categoryViewModel)">Remove subcategory</button>
                </td>
        </tr>
        }
        </tbody>
    </table>
</div>

@code {
    protected override void OnInitialized()
    {
        GetCategoryRows();
    }

    private List<CategorySimple> rows { get; set; } = [];

    private void GetCategoryRows()
    {
        rows.Clear();
        var categoryModel = CategoryService.BuildCategoryTree(CategoryService.CategoryViewModel);
        foreach (var category in categoryModel)
        {
            CategoryService.AddCategoryRow(category, "", rows);
        }
    }

    private Modal modalCategory = default!;

    private string modalTitle = "Add Category";

    private CategoryViewModel categoryModel = new();

    private async Task OnShowAddModal()
    {
        categoryModel = new CategoryViewModel();
        modalTitle = "Add Root Category";
        await modalCategory.ShowAsync();
    }

    private async Task AddSubcategory(CategoryViewModel parent)
    {
        categoryModel = new CategoryViewModel { ParentCategoryId = parent.Id, ParentCategory = parent };
        modalTitle = "Add Subcategory";
        await modalCategory.ShowAsync();
    }

    private async Task EditCategory(CategoryViewModel category)
    {
        categoryModel = new CategoryViewModel
        {
            Id = category.Id,
            Name = category.Name,
            Icon = category.Icon,
            Banner = category.Banner,
            ParentCategoryId = category.ParentCategoryId,
            ParentCategory = category.ParentCategory
        };
        modalTitle = "Edit Category";
        await modalCategory.ShowAsync();
    }

    private void RemoveCategory(CategoryViewModel category)
    {
        CategoryService.RemoveCategory(category);
        GetCategoryRows();
    }

    private async Task SaveCategory()
    {
        if (!string.IsNullOrEmpty(categoryModel.Id))
            CategoryService.UpdateCategory(categoryModel);
        else
            CategoryService.AddCategory(categoryModel);

        await modalCategory.HideAsync();
        GetCategoryRows();
    }
}
