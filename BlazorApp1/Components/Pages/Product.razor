@page "/product"
@rendermode InteractiveServer

@using BlazorApp1.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.Pages
@using static BlazorApp1.Components.Pages.ProductVariant
@using BlazorApp1.Components.Models

@inject CategoryService CategoryService
@inject ProductService ProductService

<PageTitle>Product Management</PageTitle>

<style>
    .table-images {
    display: flex;
    gap: 5px;
    }
    .table-images img {
    max-width: 80px;
    max-height: 80px;
    @* object-fit: cover; *@
    border-radius: 5px;
    border: 1px solid #ccc;
    }
    .image-preview-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
    }
    .image-preview {
    position: relative;
    display: inline-block;
    }
    .image-preview img {
    max-width: 120px;
    max-height: 120px;
    @* object-fit: cover; *@
    border: 1px solid #ccc;
    border-radius: 5px;
    }
    .image-preview button {
    position: absolute;
    top: 2px;
    right: 2px;
    background: red;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 12px;
    padding: 2px 5px;
    border-radius: 50%;
    }
</style>

<h3>Product Management</h3>
<button class="btn btn-primary" @onclick="OnShowAddModal">Add Product</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Images</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Name</td>
                <td>
                    <div class="table-images">
                        @foreach (var img in product.Images)
                        {
                            <img src="@img" />
                        }
                    </div>
                </td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => OnEditProduct(product)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<Modal @ref="modal" Title="@modalTitle" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm Model="productModel" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <label class="form-label">Name *</label>
                        <input class="form-control" @bind="productModel.Name" />
                        <ValidationMessage For="@(() => productModel.Name)" />
                    </div>
                    
                    <div>
                        <label class="form-label">Category</label>
                        <div class="mb-3">
                            <ProductCategoryDropdown 
                                Categories="Categories" 
                                OnCategorySelected="CategorySelected" 
                            />
                        </div>
                    </div>

                    <div class="border p-3 mb-3">
                        <label class="form-label">Product Images</label>
                        <InputFile OnChange="OnFilesSelected" multiple />
                        <div class="image-preview-container">
                            @foreach (var img in productModel.Images)
                            {
                                <div class="image-preview">
                                    <img src="@img" />
                                    <button type="button" @onclick="() => RemoveImage(img)">×</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div>
                        <ProductVariant 
                            ProductVariantView="@productModel.ProductVariantView"
                            SetVariantTypeName="SetVariantTypeName" 
                            SetManageVariant="SetManageVariant"/>
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Save changes</button>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {
    protected override void OnInitialized()
    {
        products = ProductService.ProductViews;
        Categories = CategoryService.CategoryViewModel;
    }

    public class ProductView
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        [Required(ErrorMessage = "Product name is required.")]
        public string Name { get; set; } = string.Empty;

        public List<string> Images { get; set; } = new();

        public bool IsHasVariant = false;
        public ProductVariantView ProductVariantView { get; set; } = new();

        public ProductCategoryView Category { get; set; } = new();
    }

    public class ProductCategoryView
{
    public string? Id { get; set; }
    public string? Name { get; set; }
    public bool IsSelected { get; set; }
    public string? ParentCategoryId { get; set; }
    
    // Current selected category
    public ProductCategoryView? Category { get; set; }
    
    // Available options for this level
    public List<ProductCategoryView> CategoryOptions { get; set; } = new();
}

    public class ProductVariantView
    {
        public List<VariantTypeName> VariantTypeNames { get; set; } = new();
        public List<ManageVariant> ManageVariants { get; set; } = new();
    }

    private List<ProductView> products = new();

    private ProductView productModel = new();
    private Modal modal = default!;
    private string modalTitle = "Add Product";
    private bool isEditing = false;

    private async Task OnShowAddModal()
    {
        productModel = new ProductView();
        modalTitle = "Add Product";
        isEditing = false;
        SelectedCategory = new CategoryViewModel();
        await modal.ShowAsync();
    }

    private async Task OnEditProduct(ProductView product)
    {
        productModel = new ProductView
        {
            Id = product.Id,
            Name = product.Name,
            Images = new List<string>(product.Images),
            ProductVariantView = product.ProductVariantView,
            Category = product.Category
        };
        modalTitle = "Edit Product";
        isEditing = true;
        await modal.ShowAsync();
    }

    private async Task OnHideModal()
    {
        await modal.HideAsync();
    }

    private async Task SaveProduct()
    {

        if (isEditing)
        {
            var existingProduct = products.FirstOrDefault(p => p.Id == productModel.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = productModel.Name;
                existingProduct.Images = new List<string>(productModel.Images);
                existingProduct.Category = productModel.Category;
            }
        }
        else
        {
            products.Add(new ProductView
            {
                Id = Guid.NewGuid().ToString(),
                Name = productModel.Name,
                Images = new List<string>(productModel.Images),
                ProductVariantView = productModel.ProductVariantView,
                Category = productModel.Category
            });
        }

        ProductService.SetProduct(products);

        await OnHideModal();
    }

    private void DeleteProduct(ProductView product)
    {
        products.Remove(product);
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            var base64 = Convert.ToBase64String(stream.ToArray());
            var contentType = file.ContentType;

            productModel.Images.Add($"data:{contentType};base64,{base64}");
        }
    }

    private void RemoveImage(string image)
    {
        productModel.Images.Remove(image);
    }

    public void SetVariantTypeName(List<VariantTypeName> variantTypeNames)
    {
        productModel.ProductVariantView.VariantTypeNames = variantTypeNames;
    }

    public void SetManageVariant(List<ManageVariant> manageVariants)
    {
        productModel.ProductVariantView.ManageVariants = manageVariants;
    }

    private void SetSubcategoryOptions(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();

        if (string.IsNullOrEmpty(selectedId)) return;

        if (productModel.Category == null) return;

        var subCategories = CategoryService.GetSubcategories(selectedId);

        if (subCategories == null || subCategories?.Count == 0) return;

        foreach (var i in subCategories)
        {
            var tmp = new ProductCategoryView()
            {
                Id = i.Id,
                Name = i.Name,
                ParentCategoryId = selectedId
            };

            if (tmp.Id == selectedId) tmp.IsSelected = true;

            productModel.Category.CategoryOptions.Add(tmp);
        }
        StateHasChanged();
    }

    private void SetSubcategory(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedId)) return;

        // Get the selected category from service
        var selectedCategory = CategoryService.GetCategoryById(selectedId);
        if (selectedCategory == null) return;

        // Clear existing category options
        productModel.Category.CategoryOptions?.Clear();

        // Get subcategories for the selected category
        var subCategories = CategoryService.GetSubcategories(selectedId);
        
        // Create new category structure
        productModel.Category.Category = new ProductCategoryView
        {
            Id = selectedCategory.Id,
            Name = selectedCategory.Name,
            ParentCategoryId = selectedCategory.ParentCategoryId,
            // Populate subcategories as options
            CategoryOptions = subCategories.Select(sc => new ProductCategoryView
            {
                Id = sc.Id,
                Name = sc.Name,
                ParentCategoryId = sc.ParentCategoryId
            }).ToList()
        };

        @* StateHasChanged(); *@
    }

    public class CategoryTesModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public List<CategoryTesModel> Subcategories { get; set; } = new();
    }

    private List<CategoryViewModel> Categories = new();

    private CategoryViewModel? SelectedCategory;

    private void CategorySelected(CategoryViewModel category)
    {
        SelectedCategory = category;
    }
}


